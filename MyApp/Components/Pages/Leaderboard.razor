@page "/leaderboard"
@using MyApp.ServiceInterface
@attribute [OutputCache(Duration = 3600)]
@inject IServiceGatewayFactory GatewayFactory
@inject AppConfig AppConfig

<PageTitle>Leaderboard</PageTitle>

<div class="mt-8 mb-20 mx-auto max-w-screen-lg">

    <h1 class="text-center my-12 text-4xl font-bold tracking-tight text-gray-900 dark:text-gray-100 sm:text-5xl">Leaderboard</h1>

    @if (TotalVotes.Count > 0 && WinRates.Count > 0)
    {
        <h3 class="mt-24 mb-8 text-2xl font-semibold">Top 1000 Questions Votes</h3>
        <div data-component="pages/Leaderboard/TotalVotes.mjs" data-props=@ToProps(Top1kVotes)></div>
        <p class="py-4">
            Based on total number of total votes received for answers of the top 1000 questions. Votes distributed by a ranking model measuring how well they answer the question asked.
        </p>
        
        <div class="mt-8 mx-auto">
            <div class="mx-auto">
                <LeaderboardStatsSingle Results=@Top1kVotes/>
            </div>
        </div>
        
        
        <h3 class="mt-24 mb-8 text-2xl font-semibold">Total Votes</h3>
        <div data-component="pages/Leaderboard/TotalVotes.mjs" data-props=@ToProps(TotalVotes)></div>
        <p class="py-4">
            Based on total number of total votes received by each model by a ranking model measuring how well they answer the question asked.
        </p>
        
        <div class="mt-8 flex justify-between gap-x-8 max-w-screen-md mx-auto">
            <LeaderboardStats Title="Total Votes" Results=@TotalVotes />
            <LeaderboardStats Title="Win Rates" Results=@WinRates />
        </div>

        <h3 class="mt-24 mb-8 text-2xl font-semibold">Win Rates</h3>
        <div data-component="pages/Leaderboard/WinRates.mjs" data-props=@ToProps(WinRates)></div>
        <p class="py-4">
            Calculated win rate of each model based on their participation in questions where they received votes.
        </p>
        
        <div class="mt-24 text-center text-sm">
            <a class="text-indigo-600 dark:text-indigo-300" href="/posts/leaderboard-intro">how results are calculated</a>        
            <div class="text-gray-500">* results updated daily</div>
        </div>
    }

</div>

@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    CalculateLeaderboardResponse? allData;
    CalculateLeaderboardResponse? top1kData;

    public List<LeaderboardStat> TotalVotes { get; set; } = [];
    public List<LeaderboardStat> WinRates { get; set; } = [];
    
    public List<LeaderboardStat> Top1kVotes { get; set; } = [];
    
    public MarkupString ToProps(List<LeaderboardStat> results) => BlazorHtml.RawJson(new { results });

    protected override async Task OnInitializedAsync()
    {
        // Only generate if missing, otherwise background task will update it.
        var gateway = GatewayFactory.GetServiceGateway(HttpContext.ToRequest());
        if (!File.Exists("App_Data/leaderboard.json"))
        {
            await gateway.ApiAsync(new CalculateLeaderBoard());
        }
        if (!File.Exists("App_Data/leaderboard-top1000.json"))
        {
            await gateway.ApiAsync(new CalculateTop1KLeaderboard());
        }

        var allVotesData = await File.ReadAllTextAsync("App_Data/leaderboard.json");
        allData = allVotesData.FromJson<CalculateLeaderboardResponse>();

        var top1KVotesData = await File.ReadAllTextAsync("App_Data/leaderboard-top1000.json");
        top1kData = top1KVotesData.FromJson<CalculateLeaderboardResponse>();

        TotalVotes = allData.MostLikedModelsByLlm.OrderByDescending(x => x.StartingUpVotes).Select((x, index) =>
            new LeaderboardStat
            {
                Rank = index + 1,
                DisplayName = AppConfig.GetApplicationUser(x.Id).DisplayName!,
                AvatarUrl = AppConfig.GetUserName(x.Id).GetAvatarUrl(),
                Stat = $"{x.StartingUpVotes.ToHumanReadable()}",
                Value = x.StartingUpVotes,
            }).Take(10).ToList();

        WinRates = allData.ModelWinRate.OrderByDescending(x => x.WinRate).Select((x, index) =>
            new LeaderboardStat
            {
                Rank = index + 1,
                DisplayName = AppConfig.GetApplicationUser(x.Id).DisplayName!,
                AvatarUrl = AppConfig.GetUserName(x.Id).GetAvatarUrl(),
                Stat = $"{Math.Round(x.WinRate, 2)}% ({x.NumberOfQuestions.ToHumanReadable()})",
                Value = Math.Round(x.WinRate, 2),
            }).Take(10).ToList();
        
        Top1kVotes = top1kData.MostLikedModelsByLlm.OrderByDescending(x => x.StartingUpVotes).Select((x, index) =>
            new LeaderboardStat
            {
                Rank = index + 1,
                DisplayName = AppConfig.GetApplicationUser(x.Id).DisplayName!,
                AvatarUrl = AppConfig.GetUserName(x.Id).GetAvatarUrl(),
                Stat = $"{x.StartingUpVotes.ToHumanReadable()}",
                Value = x.StartingUpVotes,
            }).Take(10).ToList();
    }
}
