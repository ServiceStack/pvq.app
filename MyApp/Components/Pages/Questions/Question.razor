@page "/questions/{Id:int}/{*Slug}"
@attribute [OutputCache(Duration = 60)]
@using ServiceStack.Caching
@inject QuestionsProvider QuestionsProvider
@inject RendererCache RendererCache
@inject NavigationManager NavigationManager
@inject IMessageProducer MessageProducer
@inject MemoryCacheClient Cache
@inject IWebHostEnvironment Env

<PageTitle>@title</PageTitle>
<HeadContent>
    <meta name="description" content="@summary" />
    <meta name="twitter:site" content="@@ServiceStack" />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:creator" content="@@pvqapp" />
    <meta name="og:url" content="@NavigationManager.Uri" />
    <meta name="og:title" content="@title" />
    <meta name="og:description" content="@summary" />
</HeadContent>

<div class="pt-12 pb-24 lg:grid lg:grid-cols-8 lg:gap-x-8 max-w-screen-xl mx-auto">
    <div class="lg:col-span-6">
        @if (Html != null)
        {
            @BlazorHtml.Raw(Html)
        }
        else if (question?.Post?.Title != null)
        {
            <QuestionPost Question="question"/>
            @if (question.Answers.All(x => x.CreatedBy != HttpContext.GetUserName()))
            {
                <div class="mb-20" data-component="pages/Questions/Answer.mjs" data-props="{id:@question.Id}"></div>
            }
        }
        else
        {
            <div class="mt-3 mb-20 mx-auto max-w-fit">
                @if (error != null)
                {
                    <ErrorSummary Status=@error/>
                }
                else
                {
                    <Loading/>
                }
            </div>
        }
    </div>
    <div class="lg:col-span-2 pt-8 lg:pt-24 pb-12">
        <Aside PostId=@Id Unsubscribe=@(Unsubscribe==1) />
    </div>
</div>
<LiteYoutubeIncludes />

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    [Parameter] public required int Id { get; set; }

    [Parameter] public required string Slug { get; set; }

    [SupplyParameterFromQuery] int? Force { get; set; }
    [SupplyParameterFromQuery] int? Unsubscribe { get; set; }

    QuestionAndAnswers? question;
    ResponseStatus? error;
    AuthorInfo? author;

    string title = "";
    string summary = "";
    string? Html;

    async Task load()
    {
        MessageProducer.Publish(new AnalyticsTasks {
            CreatePostStat = new PostStat { PostId = Id, Type = PostStatType.View}.WithRequest(HttpContext)
        });

        var userName = HttpContext.GetUserName();
        if (userName != null)
        {
            MessageProducer.Publish(new DbWrites {
                MarkPostAsRead = new()
                {
                    PostId = Id,
                    UserName = userName,
                }
            });
        }
        
        var noCache = Force != null && (Env.IsDevelopment() || HttpContext?.User.IsAdminOrModerator() == true);
        
        title = (Slug ?? "").Replace("-", " ").ToTitleCase();
        Html = noCache
            ? await RendererCache.GetQuestionPostHtmlAsync(Id)
            : null;

        if (!string.IsNullOrEmpty(Html))
        {
            var attrPrefix = "<template id=\"Post\">";
            var json = Html.IndexOf(attrPrefix, StringComparison.Ordinal) >= 0
                ? Html.RightPart(attrPrefix).LeftPart("</template>").HtmlDecode()
                : null;

            if (json != null)
            {
                var post = json.FromJson<Post>();
                summary = post.Summary;
                var slug = post.Slug.GenerateSlug(200);
                if (slug != Slug)
                {
                    NavigationManager.NavigateTo($"/questions/{Id}/{slug}");
                    return;
                }
            }

            if (noCache)
            {
                MessageProducer.Publish(new RenderComponent
                {
                    RegenerateMeta = new() { ForPost = Id }
                });
            }
            else
            {
                Cache.RemoveExpiredEntries();
                var oncePerMinute = Cache.Add($"Question:{Id}", Id, TimeSpan.FromMinutes(1));
                if (oncePerMinute)
                {
                    MessageProducer.Publish(new RenderComponent
                    {
                        RegenerateMeta = new() { IfPostModified = Id }
                    });
                }
            }
            return;
        }
        
        var questionFiles = await QuestionsProvider.GetQuestionAsync(Id);
        question = questionFiles.Question;
        if (question?.Post?.Body != null)
        {
            title = question.Post.Title;
            summary = question.Post.Summary;

            var slug = question.Post.Slug.GenerateSlug(200);
            if (slug != Slug)
            {
                NavigationManager.NavigateTo($"/questions/{Id}/{slug}");
                return;
            }

            if (noCache || !questionFiles.Files.Any(x => x.Name.EndsWith(".meta.json")))
            {
                MessageProducer.Publish(new RenderComponent {
                    RegenerateMeta = new() { ForPost = Id },
                });
            }
            else
            {
                // Change to regenerating meta when post is modified
                // MessageProducer.Publish(new RenderComponent {
                //     RegenerateMeta = new() { IfPostModified = Id },
                //     Question = question,
                // });
            }
        }
        else
        {
            error = new ResponseStatus
            {
                ErrorCode = "NotFound",
                Message = "Question not found"
            };
        }
    }

    protected override Task OnInitializedAsync() => load();
}
