@page "/questions/{Id:int}/{*Slug}"
@inject R2VirtualFiles R2
@inject RendererCache RendererCache
@inject NavigationManager NavigationManager
@inject IMessageProducer MessageProducer

<PageTitle>@title</PageTitle>

<div class="flex flex-wrap justify-center">
    <div>
        @if (Html != null)
        {
            @BlazorHtml.Raw(Html)
        }
        else if (question?.Post?.Title != null)
        {
            <QuestionPost Question="question"/>
        }
        else
        {
            <div class="mt-3 mb-20 mx-auto max-w-fit">
                @if (error != null)
                {
                    <ErrorSummary Status=@error/>
                }
                else
                {
                    <Loading/>
                }
            </div>
        }
    </div>
    <Aside/>
</div>

@code {
    [Parameter] public required int Id { get; set; }

    [Parameter] public required string Slug { get; set; }

    QuestionAndAnswers? question;
    ResponseStatus? error;
    AuthorInfo? author;

    string title = "";
    string? Html;

    async Task load()
    {
        title = Slug.Replace("-", " ").ToTitleCase();
        Html = await RendererCache.GetQuestionPostHtmlAsync(Id);

        if (!string.IsNullOrEmpty(Html))
        {
            var attrPrefix = "<template id=\"Post\">";
            var json = Html.IndexOf(attrPrefix, StringComparison.Ordinal) >= 0
                ? Html.RightPart(attrPrefix).LeftPart("</template>")
                : null;

            if (json != null)
            {
                var post = json.FromJson<Post>();
                var slug = post.Slug.GenerateSlug(200);
                if (slug != Slug)
                {
                    NavigationManager.NavigateTo($"/questions/{Id}/{slug}");
                    return;
                }
            }

            MessageProducer.Publish(new RenderComponent
            {
                IfQuestionModified = Id
            });
            return;
        }

        var questionFiles = await R2.GetQuestionFilesAsync(Id);
        question = await questionFiles.ToQuestionAndAnswers();
        if (question?.Post?.Body != null)
        {
            title = question.Post.Title;
            question.PostComments =
            [
                new Comment
                {
                    Body = "You may want to check out the [ins and outs of C# enums](https://github.com/steaks/codeducky/blob/master/blogs/enums.md), which discusses this as well as other useful enum tidbits",
                    CreatedBy = "mistral",
                    CreatedDate = DateTime.Now.Add(-TimeSpan.FromHours(25))
                }
            ];

            MessageProducer.Publish(new RenderComponent { Question = question });

            var slug = question.Post.Slug.GenerateSlug(200);
            if (slug != Slug)
            {
                NavigationManager.NavigateTo($"/questions/{Id}/{slug}");
                return;
            }
        }
        else
        {
            error = new ResponseStatus
            {
                ErrorCode = "NotFound",
                Message = "Question not found"
            };
        }
    }

    protected override Task OnInitializedAsync() => load();

    protected override Task OnParametersSetAsync() => load();
}