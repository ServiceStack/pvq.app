@page "/questions"
@inject IDbConnectionFactory DbFactory
@inject IMessageProducer MessageProducer

<PageTitle>@Title</PageTitle>
<div class="flex flex-wrap justify-center">
    <div>
        @if (posts != null)
        {
            <div class="mt-8 mb-20 mx-auto sm:max-w-4xl sm:w-[56rem] xl:max-w-5xl xl:w-[64rem]">
                @if (posts.Count > 0)
                {
                    <div class="mb-4 flex justify-between">
                        <div>
                            <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-gray-100 sm:text-5xl">
                                <span class="block xl:inline">All Questions</span>
                            </h1>
                            @if (!string.IsNullOrEmpty(Q))
                            {
                                <h4 class="mt-4 text-2xl">results for '@Q'</h4>
                            }
                        </div>
                        <div class="w-96 text-right">
                            <div class="mb-4">
                                <NavLink class=@PrimaryButton.Classes(ButtonStyle.Indigo) href="questions/ask">Ask Question</NavLink>
                            </div>
                            <QuestionViewTabs Path=@Path Tabs=@Tabs Active=@Tab/>
                        </div>
                    </div>

                    @if (total > PageSize)
                    {
                        <PagesNav class="border-b" Path=@Path Tab=@Tab PageSize=@PageSize Total=@total Page=@Math.Max(1, Page ?? 1)/>
                    }

                    <QuestionPosts Posts=@posts/>

                    @if (total > PageSize)
                    {
                        <PagesNav class="border-t" Path=@Path Tab=@Tab PageSize=@PageSize Total=@total Page=@Math.Max(1, Page ?? 1)/>
                    }
                }
                else
                {
                    <div class="mt-8 text-lg">
                        This search return no results.
                    </div>
                }
            </div>
        }
        else
        {
            <div class="mt-3 mb-20 mx-auto max-w-fit">
                @if (error != null)
                {
                    <ErrorSummary Status=@error/>
                }
                else
                {
                    <Loading/>
                }
            </div>
        }
    </div>
    <Aside/>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    string Path => "/questions".AddQueryParam("q", Q);
    int? Skip => Page > 1 ? (Page - 1) * PageSize : 0;
    string Title => "All Questions" + (!string.IsNullOrEmpty(Q) ? $" with '{Q}'" : "");

    static string[] DefaultTabs = ["interesting", "popular", "newest"];
    static string[] SearchTabs = ["relevance", "newest", "oldest"];
    string[] Tabs => !string.IsNullOrEmpty(Q) ? SearchTabs : DefaultTabs;

    [SupplyParameterFromQuery] string? Q { get; set; }

    [SupplyParameterFromQuery] string? Tab { get; set; }

    [SupplyParameterFromQuery] int? Page { get; set; }

    [SupplyParameterFromQuery] int? PageSize { get; set; }

    List<Post>? posts;
    ResponseStatus? error = null;
    long? total;

    async Task Load()
    {
        try
        {
            if (Tab == null || !Tabs.Contains(Tab))
                Tab = Tabs[0];
            if (PageSize is null or <= 0)
                PageSize = 25;

            var skip = Page > 1 ? (Page - 1) * PageSize : 0;
            var take = PageSize.ToPageSize();

            if (!string.IsNullOrEmpty(Q))
            {
                MessageProducer.Publish(new AnalyticsTasks
                {
                    RecordSearchView = new SearchView { Query = Q }.WithRequest(HttpContext)
                });

                using var dbSearch = await DbFactory.OpenAsync(Databases.Search);
                var q = dbSearch.From<PostFts>();
            
                var search = Q.Trim();
                if (search.StartsWith('[') && search.EndsWith(']'))
                {
                    q.WhereContainsTag(search.TrimStart('[').TrimEnd(']'));
                }
                else
                {
                    var searchPhrase = string.Join(" AND ", search.Split(' ').Select(x => '"' + x.Trim().StripQuotes() + '"'));
                    q.Where("Body match {0}", searchPhrase);
                }

                if (Tab == "newest")
                {
                    q.OrderByDescending("ModifiedDate");
                }
                else if (Tab == "oldest")
                {
                    q.OrderBy("ModifiedDate");
                }
                else
                {
                    q.OrderBy("Rank");
                }

                List<PostFts> postsFts = await dbSearch.SelectAsync(q
                    .Select("RefId, substring(Body,0,400) as Body, ModifiedDate")
                    .Skip(skip)
                    .Take(take));

                posts = postsFts.Select(x => new Post
                {
                    Id = x.RefId.LeftPart('-').ToInt(),
                    PostTypeId = x.RefId.Contains('-') ? 2 : 1,
                    Summary = x.Body.StripHtml().SubstringWithEllipsis(0,200),
                    CreationDate = x.ModifiedDate,
                    LastEditDate = x.ModifiedDate,
                }).ToList();

                var postIds = posts.Select(x => x.Id).ToSet();
                
                using var db = await DbFactory.OpenAsync();
                var fullPosts = await db.SelectAsync(db.From<Post>().Where(x => postIds.Contains(x.Id)));
                var fullPostsMap = fullPosts.ToDictionary(x => x.Id);

                foreach (var post in posts)
                {
                    if (fullPostsMap.TryGetValue(post.Id, out var fullPost))
                    {
                        post.Title = fullPost.Title;
                        post.Slug = fullPost.Slug;
                        if (post.PostTypeId == 1)
                        {
                            post.Tags = fullPost.Tags;
                            post.Score = fullPost.Score;
                            post.ViewCount = fullPost.ViewCount;
                            post.CreationDate = fullPost.CreationDate;
                            post.LastEditDate = fullPost.LastEditDate;
                        }
                    }
                }

                total = dbSearch.Count(q);
            }
            else
            {
                using var db = await DbFactory.OpenAsync();
                var q = db.From<Post>();
            
                posts = await db.SelectAsync(q
                    .OrderByView(Tab)
                    .Skip(skip)
                    .Take(take));

                total = db.Count(q);
            }
        }
        catch (Exception ex)
        {
            error = ex.ToResponseStatus();
        }
    }

    protected override Task OnInitializedAsync() => Load();
}