@page "/questions"
@inject IDbConnectionFactory DbFactory

<PageTitle>@Title</PageTitle>
<div class="flex flex-wrap justify-center">
    <div>
        @if (posts != null)
        {
            <div class="mt-8 mb-20 mx-auto sm:max-w-4xl sm:w-[56rem] xl:max-w-5xl xl:w-[64rem]">
                <div class="mb-4">
                    <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-gray-100 sm:text-5xl">
                        <span class="block xl:inline">@Title</span>
                    </h1>
                </div>


                @if (posts.Count > 0)
                {
                    <div class="py-2 flex justify-end">
                        <QuestionViewTabs Path=@Path Tabs=@Tabs Active=@Tab/>
                    </div>

                    @if (total > PageSize)
                    {
                        <PagesNav class="border-b" Path=@Path PageSize=@PageSize Total=@total Page=@Math.Max(1, Page ?? 1)/>
                    }

                    <QuestionPosts Posts=@posts/>

                    @if (total > PageSize)
                    {
                        <PagesNav class="border-t" Path=@Path PageSize=@PageSize Total=@total Page=@Math.Max(1, Page ?? 1)/>
                    }
                }
                else
                {
                    <div class="mt-8 text-lg">
                        This search return no results.
                    </div>
                }
            </div>
        }
        else
        {
            <div class="mt-3 mb-20 mx-auto max-w-fit">
                @if (error != null)
                {
                    <ErrorSummary Status=@error/>
                }
                else
                {
                    <Loading/>
                }
            </div>
        }
    </div>
    <Aside/>
</div>

@code {
    string Path => "/questions".AddQueryParam("q", Q);
    int? Skip => Page > 1 ? (Page - 1) * PageSize : 0;
    string Title => "All Questions" + (!string.IsNullOrEmpty(Q) ? $" with '{Q}'" : "");

    static string[] Tabs = ["most-votes", "most-views", "most-recent"];

    [SupplyParameterFromQuery] string? Q { get; set; }

    [SupplyParameterFromQuery] string? Tab { get; set; }

    [SupplyParameterFromQuery] int? Page { get; set; }

    [SupplyParameterFromQuery] int? PageSize { get; set; }

    List<Post>? posts;
    ResponseStatus? error = null;
    long? total;

    async Task Load()
    {
        try
        {
            if (Tab == null || !Tabs.Contains(Tab))
                Tab = Tabs[0];
            if (PageSize is null or <= 0)
                PageSize = 25;

            using var db = await DbFactory.OpenAsync();
            var q = db.From<Post>();

            q.OrderByView(Tab);
            if (!string.IsNullOrEmpty(Q))
            {
                q.WhereSearch(Q);
            }

            posts = await db.SelectAsync(q
                .OrderByView(Tab)
                .Skip(Page > 1 ? (Page - 1) * PageSize : 0)
                .Take(PageSize.ToPageSize()));

            total = db.Count(q);
        }
        catch (Exception ex)
        {
            error = ex.ToResponseStatus();
        }
    }

    protected override Task OnInitializedAsync() => Load();

    protected override Task OnParametersSetAsync() => Load();
}