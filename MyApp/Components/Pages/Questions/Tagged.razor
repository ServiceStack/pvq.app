@page "/questions/tagged/{Slug}"
@attribute [OutputCache(Duration = 600)]
@inject IDbConnectionFactory DbFactory

<div class="pt-12 pb-24 md:grid md:grid-cols-8 md:gap-x-8 max-w-screen-xl mx-auto">
    <div class="md:col-span-6">
        @if (posts != null)
        {
            <PageTitle>@selectedTag tagged questions</PageTitle>

            <div class="mx-auto">
                <div class="mb-4">
                    <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-gray-100 sm:text-5xl">
                        <span class="block xl:inline"><span class="lg:inline hidden">Questions </span>tagged [@selectedTag]</span>
                    </h1>
                </div>

                @if (posts.Count > 0)
                {
                    <div class="py-2 flex justify-end">
                        <QuestionViewTabs Path=@Path Tabs=@Tabs Active=@Tab/>
                    </div>

                    <PagesNav class="border-b" Path=@Path PageSize=@PageSize Total=@total Page=@Math.Max(1, Page ?? 1)/>

                    <QuestionPosts Posts=@posts/>

                    @if (total > PageSize)
                    {
                        <PagesNav class="border-t" Path=@Path PageSize=@PageSize Total=@total Page=@Math.Max(1, Page ?? 1)/>
                    }
                }
                else
                {
                    <div class="mt-8 text-lg">
                        There are no questions tagged with <b class="ml-2 inline-flex items-center rounded-md bg-blue-50 dark:bg-blue-900 px-2 py-1 text-sm font-medium text-blue-700 dark:text-blue-200 ring-1 ring-inset ring-blue-700/10">@Slug</b>
                    </div>
                }

            </div>
        }
        else
        {
            <div class="mt-3 mb-20 mx-auto max-w-fit">
                @if (error != null)
                {
                    <ErrorSummary Status=@error/>
                }
                else
                {
                    <Loading/>
                }
            </div>
        }
    </div>
    <div class="md:col-span-2 pt-8 md:pt-24 pb-12">
        <Aside Tag=@selectedTag />
    </div>
</div>

@code {
    string Path => $"/questions/tagged/{selectedTag.UrlEncode()}";
    int? Skip => Page > 1 ? (Page - 1) * PageSize : 0;

    [Parameter] public required string Slug { get; set; }

    static string[] Tabs = ["relevance", "newest", "oldest"];

    [SupplyParameterFromQuery] string? Tab { get; set; }

    [SupplyParameterFromQuery] int? PageSize { get; set; }

    [SupplyParameterFromQuery] int? Page { get; set; }

    [SupplyParameterFromQuery] string? Use { get; set; }

    string selectedTag = "";
    List<Post>? posts;
    ResponseStatus? error;
    long? total;

    async Task Load()
    {
        try
        {
            if (Tab == null || !Tabs.Contains(Tab))
                Tab = Tabs[0];
            if (PageSize is null or <= 0)
                PageSize = 25;

            selectedTag = Slug.UrlDecode();

            if (Use == "db")
            {
                using var db = await DbFactory.OpenAsync();
                var q = db.From<Post>()
                    .WhereContainsTag(selectedTag);
                posts = await db.SelectAsync(q
                    .OrderByView(Tab)
                    .Skip(Page > 1 ? (Page - 1) * PageSize : 0)
                    .Take(PageSize.ToPageSize()));
                total = db.Count(q);
            }
            else //search
            {
                using var dbSearch = await DbFactory.OpenAsync(Databases.Search);
                var q = dbSearch.From<PostFts>();
                q.WhereContainsTag(selectedTag);
                q.OrderByView(Tab);

                List<PostFts> postsFts = await dbSearch.SelectAsync(q
                    .Select("RefId, substring(Body,0,400) as Body, ModifiedDate")
                    .Skip(Page > 1 ? (Page - 1) * PageSize : 0)
                    .Take(PageSize.ToPageSize()));

                total = dbSearch.Count(q);
                using var db = await DbFactory.OpenAsync();
                posts = await db.PopulatePostsAsync(postsFts);
            }
        }
        catch (Exception ex)
        {
            error = ex.ToResponseStatus();
        }
    }

    protected override Task OnInitializedAsync() => Load();
}