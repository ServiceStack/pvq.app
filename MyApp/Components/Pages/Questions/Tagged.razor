@page "/questions/tagged/{Slug}"

@if (selectedTag != null)
{
    <PageTitle>@selectedTag tagged questions</PageTitle>

    <div class="mt-8 mb-20 mx-auto max-w-5xl px-4">
        <div class="mb-4">
            <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-gray-100 sm:text-5xl">
                <span class="block xl:inline">All questions tagged [@selectedTag]</span>
            </h1>
        </div>

        <QuestionPosts Posts=@Posts />
    </div>
}
else
{
    <div class="mt-3 mb-20 mx-auto max-w-fit">
    @if (error != null)
    {
        <ErrorSummary Status=@error />
    }
    else
    {
        <Loading />
    }
    </div>
}

@code {
    [Parameter] public required string Slug { get; set; }

    string? selectedTag;
    List<Post> Posts = [];
    readonly ResponseStatus? error = null;

    async Task Load()
    {
        selectedTag = Slug.UrlDecode().Replace("'","").SqlVerifyFragment();
        using var db = HostContext.AppHost.GetDbConnection();
        Posts = await db.SelectAsync(db.From<Post>()
            .UnsafeWhere("',' || tags || ',' like '%," + selectedTag + ",%'")
            .OrderByDescending(x => x.CreationDate)
            .Take(25));
    }

    protected override Task OnInitializedAsync() => Load();

    protected override Task OnParametersSetAsync() => Load();
}
