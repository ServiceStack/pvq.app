@using MyApp.Data
@inject AppConfig AppConfig
@inject MarkdownQuestions Markdown

<template id="Post">@Question.Post.ToJson()</template>
<template id="Meta">@Question.Meta.ToJson()</template>

<div class="mt-8 mb-20 mx-auto sm:max-w-4xl sm:w-[56rem] xl:max-w-5xl xl:w-[64rem]" data-module="mjs/question.mjs">
    <article data-postid=@Question.Id>
        <h1 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-100 lg:text-4xl xl:text-5xl">
            <span class="block xl:inline">@Question.Post.Title</span>
        </h1>
        <div class="my-4 py-2 flex justify-between border-b border-gray-200 dark:border-gray-700">
            <div class="flex gap-x-6 text-sm text-gray-500 dark:text-gray-400">
                <div>
                    @if (Question.Post is { Id: < 100_000_000, CreatedBy: null })
                    {
                        <a class="text-indigo-700 dark:text-indigo-200 hover:underline" target="_blank" href=@StackOverflowUrl>asked</a>
                    }
                    else
                    {
                        <span>asked</span>
                    }
                    <b>@((DateTime.UtcNow - Question.Post.CreationDate).TimeAgo())</b>
                </div>
                @if (Question.Post.LastEditDate != null)
                {
                    <div>
                        <b>@((DateTime.UtcNow - Question.Post.LastEditDate.Value).TimeAgo())</b>
                    </div>
                }
                <div>
                    <span>viewed</span>
                    <b>@($"{Question.ViewCount:n0}") times</b>
                </div>
            </div>
            @if (Question.Post.CreatedBy != null)
            {
                <div class="flex mr-4">
                    <img class="h-6 w-6 sm:h-8 sm:w-8 rounded-full bg-contain" src="/avatar/@Question.Post.CreatedBy" alt=@($"{Question.Post.CreatedBy} avatar")>
                    <div>
                        <b class="ml-2">@Question.Post.CreatedBy</b>
                    </div>
                </div>
            }
        </div>
        <div class="flex">
            <div class="w-20">
                <div id="@Question.Post.Id" class="voting flex flex-col items-center pr-2">
                    <!-- bx:up-arrow bxs:up-arrow <path fill="currentColor" d="M3 19h18a1.002 1.002 0 0 0 .823-1.569l-9-13c-.373-.539-1.271-.539-1.645 0l-9 13A.999.999 0 0 0 3 19"/> -->
                    <svg class="up w-6 h-6 sm:w-10 sm:h-10 cursor-pointer select-none hover:text-green-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M3 19h18a1.002 1.002 0 0 0 .823-1.569l-9-13c-.373-.539-1.271-.539-1.645 0l-9 13A.999.999 0 0 0 3 19m9-12.243L19.092 17H4.908z"/></svg>
                    <b class="score text-xl" data-score=@Question.QuestionScore>@Question.QuestionScore</b>
                    <!-- bx:down-arrow bxs:down-arrow <path fill="currentColor" d="M11.178 19.569a.998.998 0 0 0 1.644 0l9-13A.999.999 0 0 0 21 5H3a1.002 1.002 0 0 0-.822 1.569z"/> -->
                    <svg class="down w-6 h-6 sm:w-10 sm:h-10 cursor-pointer select-none hover:text-green-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M21.886 5.536A1.002 1.002 0 0 0 21 5H3a1.002 1.002 0 0 0-.822 1.569l9 13a.998.998 0 0 0 1.644 0l9-13a.998.998 0 0 0 .064-1.033M12 17.243L4.908 7h14.184z"/></svg>
                </div>
            </div>
            <div id="question" class="lg:flex-grow prose">
                @BlazorHtml.Raw(Markdown.GenerateHtml(Question.Post.Body))
            </div>
        </div>
        <div class="py-6 flex flex-1 items-end border-b border-gray-200 dark:border-gray-700">
            <dl class="flex space-x-4 divide-x divide-gray-200 dark:divide-gray-800 text-sm sm:space-x-6 w-full">
                <div class="flex flex-wrap gap-x-2 gap-y-2">
                    @foreach (var tag in Question.Post.Tags.Safe())
                    {
                        <a href="questions/tagged/@tag.UrlEncode()" class="inline-flex items-center rounded-md bg-blue-50 dark:bg-blue-900 hover:bg-blue-100 dark:hover:bg-blue-800 px-2 py-1 text-xs font-medium text-blue-700 dark:text-blue-200 ring-1 ring-inset ring-blue-700/10">@tag</a>
                    }
                </div>
                @if (Question.Post.LastEditDate != null)
                {
                    <div class="flex flex-grow px-4 sm:px-6 text-sm justify-end">
                        @if (Question.Post is { Id: < 100_000_000, CreatedBy: null })
                        {
                            <a class="text-indigo-700 dark:text-indigo-200 hover:underline" target="_blank" href=@StackOverflowUrl>edited</a>
                        }
                        else
                        {
                            <span>edited</span>
                        }
                        <dd class="ml-2 text-gray-600 dark:text-gray-300">
                            <time datetime="@Markdown.GetDateTimestamp(Question.Post?.LastEditDate)">@Markdown.GetDateLabel(Question.Post?.LastEditDate)</time>
                        </dd>
                    </div>
                }
            </dl>
        </div>
        @if (Question.QuestionComments.Count > 0)
        {
            <div class="border-t border-gray-200 dark:border-gray-700">
                @foreach (var comment in Question.QuestionComments)
                {
                    <div class="p-2 border-b border-gray-500 dark:border-gray-400 text-sm text-gray-600 dark:text-gray-300 prose prose-comment">
                        @BlazorHtml.Raw(Markdown.GenerateCommentHtml(comment.Body))
                        <span class="inline-block">
                            <span class="px-1" aria-hidden="true">&middot;</span>
                            <span class="text-indigo-700">@comment.CreatedBy</span>
                            <span class="ml-1 text-gray-400"> @Markdown.GetDateLabel(comment.CreatedDate)</span>
                        </span>
                    </div>
                }
            </div>
        }
    </article>
    
    <div id="answers" class="mt-16">
        @if (@Question.Answers.Count > 0)
        {
            <h3 class="text-2xl font-semibold">
                @Question.Answers.Count Answers
            </h3>
        }
        <div>
            @foreach (var answer in Question.Answers)
            {
                <div class="py-8 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex">
                        <div class="md:w-32 pr-2">
                            <div id=@answer.Id class="voting flex flex-col items-center">
                                <svg class="up w-6 h-6 sm:w-10 sm:h-10 cursor-pointer select-none hover:text-green-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M3 19h18a1.002 1.002 0 0 0 .823-1.569l-9-13c-.373-.539-1.271-.539-1.645 0l-9 13A.999.999 0 0 0 3 19m9-12.243L19.092 17H4.908z"/></svg>
                                <b class="score text-xl" data-score=@Question.GetAnswerScore(answer.Id)>@Question.GetAnswerScore(answer.Id)</b>
                                <svg class="down w-6 h-6 sm:w-10 sm:h-10 cursor-pointer select-none hover:text-green-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M21.886 5.536A1.002 1.002 0 0 0 21 5H3a1.002 1.002 0 0 0-.822 1.569l9 13a.998.998 0 0 0 1.644 0l9-13a.998.998 0 0 0 .064-1.033M12 17.243L4.908 7h14.184z"/></svg>
                            </div>
                            @{
                                var userName = AppConfig.GetUserName(answer.Model);
                            }
                            <div class="mt-8 flex flex-col items-center">
                                <img class="w-10 h-10 xl:w-20 xl:h-20 bg-cover inline-block" src="@userName.GetAvatarUrl()">
                                <div class="hidden md:block text-center whitespace-nowrap text-xs xl:text-sm font-semibold">@userName</div>
                            </div>
                        </div>
                        <div class="xl:flex-grow prose">
                            @BlazorHtml.Raw(Markdown.GenerateHtml(answer.Choices.FirstOrDefault()?.Message.Content))
                        </div>
                    </div>
                    <div class="mt-4 flex justify-end text-gray-700 dark:text-gray-200 text-sm">
                        answered <time class="ml-2" datetime="@Markdown.GetDateTimestamp(DateTimeOffset.FromUnixTimeSeconds(answer.Created).DateTime)">@Markdown.GetDateLabel(DateTimeOffset.FromUnixTimeSeconds(answer.Created).DateTime)</time>
                    </div>
                </div>
                @if (Question.GetAnswerComments(answer.Id).Count > 0)
                {
                    <div class="border-t border-gray-200 dark:border-gray-700">
                        @foreach (var comment in Question.GetAnswerComments(answer.Id))
                        {
                            <div class="p-2 border-b border-gray-500 dark:border-gray-400 text-sm text-gray-600 dark:text-gray-300 prose prose-comment">
                                @BlazorHtml.Raw(Markdown.GenerateCommentHtml(comment.Body))
                                <span class="inline-block">
                                    <span class="px-1" aria-hidden="true">&middot;</span>
                                    <span class="text-indigo-700">@comment.CreatedBy</span>
                                    <span class="ml-1 text-gray-400"> @Markdown.GetDateLabel(comment.CreatedDate)</span>
                                </span>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    string StackOverflowUrl => $"https://stackoverflow.com/questions/{Question.Post.Id}/{Question.Post.Title.GenerateSlug()}";
    
    [Parameter]
    public required QuestionAndAnswers Question { get; set; }
}
