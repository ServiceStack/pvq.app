<div class=@CssUtils.ClassNames(@class, "flex items-center justify-between border-gray-200 bg-white dark:bg-black py-3")>
    @if (Pages > 1 && Total > 0 && Total > PageSize)
    {
        <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
            <div>
                <p class="text-sm text-gray-700">
                    <span class="hidden lg:inline">Showing</span>
                    <span class="font-medium">@(Page < 2 ? 1 : 1 + (Page * UsePageSize))</span>
                    to
                    <span class="font-medium">@((Page < 2 ? 1 : Page * UsePageSize) + UsePageSize)</span>
                    of
                    <span class="font-medium">@($"{Total:N0}")</span>
                    <span class="hidden lg:inline">results</span>
                </p>
            </div>
            <div class="hidden md:block">
                <span class="isolate inline-flex rounded-md shadow-sm">
                    @foreach (var size in PageSizes)
                    {
                        var cls = (size == 10
                            ? "rounded-l-md "
                            : size == 50
                                ? "rounded-r-md "
                                : "")
                            + (size == UsePageSize 
                                ? "relative z-10 inline-flex items-center bg-indigo-600 px-4 py-2 text-sm font-semibold text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                                : "relative inline-flex items-center bg-white dark:bg-black px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10");
                        <NavLink href=@GetRoute(1, size) class=@cls>@size</NavLink>
                    }
                </span>
            </div>
            <div>
                <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                    @if (StartPage > 1)
                    {
                        <NavLink href=@GetRoute(1, PageSize) class="relative inline-flex items-center px-2 py-2 text-gray-400 hover:text-gray-500" title="First Page">
                            <span class="sr-only">First</span>
                            <svg class="h-5 w-5 " xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M8.5 5v14h-2V5zm9.164 1.75L12.414 12l5.25 5.25l-1.414 1.414L9.586 12l6.664-6.664z"/></svg>
                        </NavLink>
                    }
                    @if (Page > 1)
                    {
                        <NavLink href="@GetRoute(Page - 1, PageSize)" class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                            <span class="sr-only">Previous</span>
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd"/>
                            </svg>
                        </NavLink>
                    }
                    @for (var i = StartPage; i < EndPage; i++)
                    {
                        var pageNo = i + 1;
                        if (Page == pageNo)
                        {
                            <NavLink href="@GetRoute(pageNo, PageSize)" class="relative z-10 inline-flex items-center bg-indigo-600 px-4 py-2 text-sm font-semibold text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" aria-current="page">@pageNo</NavLink>
                        }
                        else
                        {
                            <NavLink href="@GetRoute(pageNo, PageSize)" class="relative hidden items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 md:inline-flex">@pageNo</NavLink>
                        }
                    }
                    @if (Pages > EndPage)
                    {
                        <span class="relative hidden lg:inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-700 ring-1 ring-inset ring-gray-300 focus:outline-offset-0">...</span>
                        <NavLink href="@GetRoute(Pages, PageSize)" class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">@Pages</NavLink>
                    }
                    @if (Page < Pages)
                    {
                        <NavLink href="@GetRoute(Page + 1, PageSize)" class="relative hidden lg:inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                            <span class="sr-only">Next</span>
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"/>
                            </svg>
                        </NavLink>
                    }
                </nav>
            </div>
        </div>
    }
    else
    {
        <div class="-mt-8">
            <p class="text-sm text-gray-700">
                Showing
                <span class="font-medium">@($"{Total:N0}")</span>
                results:
            </p>
        </div>
    }
</div>

@code {
    const int DefaultPageSize = 25;
    int UsePageSize => PageSize ?? DefaultPageSize;
    static readonly int[] PageSizes = [10, 25, 50];

    [Parameter] public string? @class { get; set; }
    [Parameter] public required string Path { get; set; }
    [Parameter] public required string? Tab { get; set; }
    [Parameter] public required long? Total { get; set; }
    [Parameter] public required int? PageSize { get; set; }
    [Parameter] public required int Page { get; set; }
    int Pages => (int)Math.Ceiling((Total ?? 0) / (double) UsePageSize);

    int StartPage => Page > 1
        ? Math.Max(0, Page - 3)
        : 0;

    int EndPage => Math.Min(StartPage + 5, Pages);

    public string GetRoute(int? page = 1, int? pageSize = null) => 
        Path.AddQueryParam("tab", Tab).AddQueryParam("page", page).AddQueryParam("pagesize", pageSize);
}